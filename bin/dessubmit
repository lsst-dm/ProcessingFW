#!/usr/bin/env python

"""TODO docstring.
"""

import argparse
import os
import sys
import shutil
import io

import processingfw.pfwdefs as pfwdefs
import despymisc.miscutils as miscutils
from processingfw.pfwcondor import CondorException
import processingfw.pfwsubmit as pfwsubmit
import processingfw.pfwcheck as pfwcheck
import processingfw.pfwconfig as pfwconfig
import processingfw.pfwlog as pfwlog
from intgutils.wcl import WCL
import intgutils.intgdefs as intgdefs

__version__ = '$Rev: 43890 $'


def create_dags(config, logfh):
    """Call functions to write condor dags needed at submission time.
    """
    realstdout = sys.stdout
    realstderr = sys.stderr

    sys.stdout = logfh
    sys.stderr = logfh

    maindag = config.get_filename('mngrdag', {intgdefs.REPLACE_VARS: True,
                                              pfwdefs.PF_CURRVALS: {'dagtype': 'mainmngr'}})
    print(maindag)

    try:
        pfwsubmit.write_main_dag(config, maindag)
    except:
        sys.stdout = realstdout
        sys.stderr = realstderr
        raise

    sys.stdout = realstdout
    sys.stderr = realstderr

    return maindag

# useDBin:   get default config, files already tracked in archive,
#            existing file metadata, provenance
# use_db_out:  framework can write to database, unclear how can control pipeline application codes
# useQCF: only used if useDBout is true, controls whether to use QCF or not
# usePFWconfig:  whether to include $PROCESSINGFW_DIR/etc/pfwconfig.des

# des_services and des_db_section override wcl and environ
#     wcl overrides environ


def parse_args(argv):
    """Parse command line arguments.
    """
    parser = argparse.ArgumentParser(description='Submit a run to the processing framework')
    boolargs = [pfwdefs.PF_DRYRUN, pfwdefs.PF_USE_DB_IN, pfwdefs.PF_USE_DB_OUT,
                pfwdefs.PF_USE_QCF, 'usePFWconfig', 'version']

    for barg in boolargs:
        parser.add_argument('--%s' % barg, action='store', type=str)
    parser.add_argument('--notarget', action='store', type=str,
                        help='Depricated. use --%s=True' % pfwdefs.PF_DRYRUN)
    parser.add_argument('--gensubmit', action='store')
    parser.add_argument('--des_services', action='store')
    parser.add_argument('--des_db_section', action='store')
    parser.add_argument('submitwcl', nargs=1, action='store')

    args = vars(parser.parse_args(argv))   # convert dict

    for barg in boolargs:
        if args[barg] is not None:
            args[barg] = miscutils.convertBool(args[barg])

    if args['notarget'] is not None:
        if args['notarget']:
            print("Note:  notarget is depricated.   Instead use --%s" % pfwdefs.PF_DRYRUN)
            args[pfwdefs.PF_DRYRUN] = True
        else:
            args[pfwdefs.PF_DRYRUN] = False

    args['wclfile'] = args['submitwcl'][0]
    args['get_db_config'] = True

    if args[pfwdefs.PF_USE_QCF] and not args[pfwdefs.PF_USE_DB_OUT]:
        print("Note: cannot use QCF if %s is False" % pfwdefs.PF_USE_DB_OUT)
        print("      setting useQCF to False")
        args[pfwdefs.PF_USE_QCF] = False

    return args


def save_submit_file(submitfile, fullcfgstr, config):
    """Save original submit file as is.

    After includes expanded and with db defaults.
    """
    print('Saving submit file...', end=' ')

    uberctrl = config.getfull('uberctrl_dir')

    origfile = config.get_filename(filepat='config',
                                   searchopts={pfwdefs.PF_CURRVALS: {'cfglabel': 'orig'}})
    # save as is
    shutil.copyfile(submitfile, '%s/%s' % (uberctrl, origfile))

    # save with expanded wcl, i.e. includes
    expwclfile = config.get_filename(filepat='config',
                                     searchopts={pfwdefs.PF_CURRVALS: {'cfglabel': 'exp'},
                                                 intgdefs.REPLACE_VARS: True})
    expwcl = WCL()
    with open(submitfile, 'r') as infh:
        expwcl.read(infh)
    with open("%s/%s" % (uberctrl, expwclfile), 'w') as outfh:
        expwcl.write(outfh, False, 4)
        #if config['usePFWconfig'] is None:
        #    config['usePFWconfig'] = True

    # save config with expanded wcl, db values
    sopts = {pfwdefs.PF_CURRVALS: {'cfglabel': 'full'},
             intgdefs.REPLACE_VARS: True}
    fullwclfile = config.get_filename(filepat='config', searchopts=sopts)
    with open("%s/%s" % (uberctrl, fullwclfile), 'w') as outfh:
        outfh.write(fullcfgstr)

    config['origwcl'] = origfile
    config['expwcl'] = expwclfile
    config['fullwcl'] = fullwclfile

    print('DONE')


def check_submit_file(config):
    """Check basic values are in config file.
    """
    print('Checking submit file:')
    cnts = pfwcheck.check_globals(config, '    ')
    if cnts[pfwcheck.ERRCNT_POS] > 0:
        miscutils.fwdie("Errors in submit file", pfwdefs.PF_EXIT_FAILURE)
    elif cnts[pfwcheck.WARNCNT_POS] > 0:
        print("\t(Note: %d warning(s) in config)" % cnts[pfwcheck.WARNCNT_POS])
    elif cnts[pfwcheck.CLEANCNT_POS] > 0:
        print("\t(Note: %d item(s) cleaned in config)" % cnts[pfwcheck.CLEANCNT_POS])


def submit_attempt(config, maindag, logfh):
    """Submit processing attempt to condor queue.
    """
    condorid = pfwsubmit.submit_main_dag(config, maindag, logfh)
    if (miscutils.convertBool(config.getfull(pfwdefs.PF_USE_DB_OUT)) and
            condorid is not None):
        print("Saving run's condorid into PFW tables...", end=' ')
        import processingfw.pfwdb as pfwdb
        dbh = pfwdb.PFWDB(config.getfull('submit_des_services'),
                          config.getfull('submit_des_db_section'))
        dbh.update_attempt_cid(config, condorid)
        print('DONE')
    print('Submission of processing attempt completed')


def get_attnum(config):
    """Save attnum in config from either DB or give it default value.
    """
    if miscutils.convertBool(config.getfull(pfwdefs.PF_USE_DB_OUT)):
        print('Inserting run into PFW tables...', end=' ')
        import processingfw.pfwdb as pfwdb   # import late
        dbh = pfwdb.PFWDB(config.getfull('submit_des_services'),
                          config.getfull('submit_des_db_section'))
        dbh.insert_run(config)
        dbh.insert_attempt_val(config)
        dbh.insert_attempt_label(config)
        print('DONE')
    elif pfwdefs.ATTNUM not in config:
        print('\tNo DB.  Defaulting %s to 0' % pfwdefs.ATTNUM)
        config[pfwdefs.ATTNUM] = 0
        config['pfw_attempt_id'] = 0
        config['task_id'] = {'attempt': 0}


def main(argv):
    """Program entry point.
    """
    os.putenv('PYTHONUNBUFFERED', 'true')
    print('Using version %s of dessubmit\n' % __version__)
    args = parse_args(argv)

    if args['version']:
        return 0   # already printed version

    if args[pfwdefs.PF_DRYRUN]:
        print("RUNNING WITH %s\n" % pfwdefs.PF_DRYRUN.upper())

    try:
        print("Reading framework configuration and submit wcl:")
        config = pfwconfig.PfwConfig(args)

        if args['gensubmit']:
            with open(args['gensubmit'], 'w') as outfh:
                config.write(outfh)
        else:
            print('\tMinimal checks of submit wcl...', end=' ')
            pfwsubmit.min_wcl_checks(config)
            print('DONE')

            get_attnum(config)

            print('Checking system:')
            pfwsubmit.run_sys_checks()

            print('Checking if need proxy...', end=' ')
            try:
                pfwsubmit.check_proxy(config)
            except AssertionError:
                print('ERROR\nABORTING SUBMISSION')
                print('Error: Cannot find valid proxy')
                return pfwdefs.PF_EXIT_FAILURE  # exit on error
            print('DONE')

            # save config as string before adding submit specific information
            # so we can save to a file later (file location needs submit info)
            fullstrio = io.StringIO()
            config.write(fullstrio, False, 4)
            fullcfgstr = fullstrio.getvalue()
            fullstrio.close()

            # set submit specific information (e.g., submit side directories)
            config.set_submit_info()

            print('Creating submit dirs:')
            pfwsubmit.create_submitside_dirs(config)

            uberctrl = config.getfull('uberctrl_dir')

            # log file for dessubmit
            logfile = '%s/dessubmit.log' % (uberctrl)
            logfh = open(logfile, 'w', 0)

            pfwlog.log_pfw_event(config, 'submit', '', '')

            save_submit_file(args['wclfile'], fullcfgstr, config)
            check_submit_file(config)

            # must be in internal directory when submitting simulation
            os.chdir(uberctrl)

            print('Writing internal files...', end=' ')
            if pfwdefs.SW_BLOCKLIST in config:
                config[pfwdefs.SW_BLOCKLIST] = config[pfwdefs.SW_BLOCKLIST].lower()
            maindag = create_dags(config, logfh)
            with open('%s/config.des' % uberctrl, 'w') as cfgfh:
                config.write(cfgfh)
            print('DONE')

            submit_attempt(config, maindag, logfh)
    except CondorException as cexc:
        print('ERROR\nABORTING SUBMISSION')
        print('Error: %s' % str(cexc))
        return pfwdefs.PF_EXIT_FAILURE  # exit on error
    except Exception:
        # error handling code here
        print('ERROR\nABORTING SUBMISSION')
        raise
    else:
        return pfwdefs.PF_EXIT_SUCCESS  # exit errorlessly


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
