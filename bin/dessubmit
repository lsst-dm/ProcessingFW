#!/usr/bin/env python
# $Id$
# $Rev::                                  $:  # Revision of last commit.
# $LastChangedBy::                        $:  # Author of last commit. 
# $LastChangedDate::                      $:  # Date of last commit.

""" TODO docstring """

import argparse
import time
import os
import shutil
import sys

from processingfw.pfwdefs import *
from coreutils.miscutils import *
from processingfw.pfwcondor import CondorException
import processingfw.pfwsubmit as pfwsubmit
import processingfw.pfwcheck as pfwcheck
import processingfw.pfwutils as pfwutils
import processingfw.pfwconfig as pfwconfig
import processingfw.pfwlog as pfwlog

VERSION = '$Rev$'

################################################################
def create_dags(config, logfh):
    """ Call functions to write condor dags needed at submission time """
    realstdout = sys.stdout
    realstderr = sys.stderr

    sys.stdout = logfh
    sys.stderr = logfh

    maindag = config.get_filename('mngrdag', {PF_CURRVALS: {'dagtype': 'mainmngr'}})

    try:
        pfwsubmit.write_main_dag(config, maindag)
    except:
        sys.stdout = realstdout
        sys.stderr = realstderr
        raise

    sys.stdout = realstdout
    sys.stderr = realstderr

    return maindag

# useDBin:   get default config, files already tracked in archive, existing file metadata, provenance
# use_db_out:  framework can write to database, unclear how can control pipeline application codes
# useQCF: only used if useDBout is true, controls whether to use QCF or not
# usePFWconfig:  whether to include $PROCESSINGFW_DIR/etc/pfwconfig.des

# des_services and des_db_section override wcl and environ
#     wcl overrides environ

def main(args):
    os.putenv('PYTHONUNBUFFERED', 'true')
    try:
        parser = argparse.ArgumentParser(description='Submit a run to the processing framework')
        boolargs = [PF_DRYRUN, PF_USE_DB_IN, PF_USE_DB_OUT, PF_USE_QCF, 'usePFWconfig', 'version']

        for barg in boolargs:
            parser.add_argument('--%s' % barg, action='store', type=str)
        parser.add_argument('--notarget', action='store', type=str, help='Depricated. use --%s=True' % PF_DRYRUN)
        parser.add_argument('--gensubmit', action='store')
        parser.add_argument('--des_services', action='store')
        parser.add_argument('--des_db_section', action='store')
        parser.add_argument('submitwcl', nargs=1, action='store')

        args = vars(parser.parse_args())   # convert dict

        for barg in boolargs:
            if args[barg] is not None:
                args[barg] = convertBool(args[barg])

        print 'Using version %s of dessubmit\n' % VERSION

        if args['version']:
            return 0   # already printed version

        if args['notarget']:
            print "Note:  notarget is depricated.   Instead use --%s" % PF_DRYRUN 
            args[PF_DRYRUN] = True
        else:
            args[PF_DRYRUN] = False

        if args[PF_DRYRUN]:
            print "RUNNING WITH %s\n" % PF_DRYRUN.upper()

        args['wclfile'] = args['submitwcl'][0]
        args['get_db_config'] = True

        if args[PF_USE_QCF] and not args[PF_USE_DB_OUT]:
            print "Note: cannot use QCF if %s is False" % PF_USE_DB_OUT
            print "      setting useQCF to False"
            args[PF_USE_QCF] = False

        print "Reading framework configuration and submit wcl:"
        config = pfwconfig.PfwConfig(args) 

        if args['gensubmit']:
            config.save_file(args['gensubmit'])
        else:
            print '\tMinimal checks of submit wcl...',
            pfwsubmit.min_wcl_checks(config)
            print 'DONE'

            if convertBool(config[PF_USE_DB_OUT]):
                print 'Inserting run into PFW tables...',
                import processingfw.pfwdb as pfwdb   # import late 
                dbh = pfwdb.PFWDB(config['submit_des_services'], config['submit_des_db_section'])
                dbh.insert_run(config) 
                dbh.insert_attempt_val(config)
                dbh.insert_attempt_label(config)
                print 'DONE'
            elif ATTNUM not in config:
                print '\tNo DB.  Defaulting %s to 0' % ATTNUM
                config[ATTNUM] = 0 
               

            print 'Checking system:'
            pfwsubmit.run_sys_checks()

            config.set_submit_info()

            print 'Creating submit dirs:'
            pfwsubmit.create_submitside_dirs(config)

            uberctrl = config['uberctrl_dir']

            # log file for dessubmit
            logfile = '%s/dessubmit.log' % (uberctrl)
            logfh = open(logfile, 'w', 0)

            pfwlog.log_pfw_event(config, 'submit', '', '')

            # save original submit file as is
            print 'Saving submit file...',
            shutil.copy2(args['wclfile'], "%s/orig_submit.des" % uberctrl)
            print 'DONE'

            # save config
            config.save_file('%s/expand_submit.des' % uberctrl)


            print 'Checking submit file:'
            cnts = pfwcheck.check_globals(config, '    ')
            if cnts[pfwcheck.ERRCNT_POS] > 0:
                fwdie("Errors in submit file", PF_EXIT_FAILURE)
            elif cnts[pfwcheck.WARNCNT_POS] > 0:
                print "\t(Note: %d warning(s) in config)" % cnts[pfwcheck.WARNCNT_POS]
            elif cnts[pfwcheck.CLEANCNT_POS] > 0:
                print "\t(Note: %d item(s) cleaned in config)" % cnts[pfwcheck.CLEANCNT_POS]

            # must be in internal directory when submitting simulation
            os.chdir(uberctrl)

            print 'Writing internal files...',
            maindag = create_dags(config, logfh)
            config.save_file('%s/config.des' % uberctrl)
            print 'DONE'

            condorid = pfwsubmit.submit_main_dag(config, maindag, logfh)
            if (convertBool(config[PF_USE_DB_OUT]) and 
                condorid is not None):
                print "Saving run's condorid into PFW tables...",
                import processingfw.pfwdb as pfwdb
                dbh = pfwdb.PFWDB(config['submit_des_services'], config['submit_des_db_section'])
                dbh.update_attempt_cid(config, condorid)
                print 'DONE'
    except CondorException as e:
        print 'ERROR\nABORTING SUBMISSION' 
        print 'Error: %s' % str(e) 
        return PF_EXIT_FAILURE  # exit on error
    except Exception:
        # error handling code here
        print 'ERROR\nABORTING SUBMISSION' 
        raise
    else:
        return PF_EXIT_SUCCESS  # exit errorlessly
 
if __name__ == '__main__':
    sys.exit(main(sys.argv))


