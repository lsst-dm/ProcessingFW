#!/usr/bin/env python
# $Id$
# $Rev::                                  $:  # Revision of last commit.
# $LastChangedBy::                        $:  # Author of last commit.
# $LastChangedDate::                      $:  # Date of last commit.

import argparse
import sys
import processingfw.pfwcondor as pfwcondor
from processingfw.pfwdefs import *


def main(argv=None):
    parser = argparse.ArgumentParser(description='desstat')
    parser.add_argument('--user', action='store', default=None)
    args = parser.parse_args(argv)

    constraint_str = "-constraint %sisjob " % ATTRIB_PREFIX
    if args.user:
        constraint_str += args.user
    (qjobs, top_jobs, orphan_jobs) = pfwcondor.condorq_dag(constraint_str)

    jobcnt = len(qjobs)
    if jobcnt == 0:
        print "No framework jobs\n" 
        return(1)

    # Output jobs
    print_header()
    for job in sorted(top_jobs): 
        print_single(job, " ", qjobs)

    for job in sorted(orphan_jobs):
        if '%sblock' % ATTRIB_PREFIX in qjobs[job] and \
            qjobs[job]['%sblock' % ATTRIB_PREFIX] == 'saveruntime':
            print_single(job, " ", qjobs)
        else:
            print_single(job, "X", qjobs)

    return(0)


def print_header(): 
    """ Print header line """
    print "%7s %1s %3s %-8s %-27s %-30s %-15s %-17s %-8s %-30s" % \
          ("ID", "T","PRJ","PIPELINE","RUN","BLOCK","SUBBLOCK","STAT (H/P/R/T)",
           "OPERATOR", "RUNSITE")
    print "="*133


def status_target_jobs(job, qjobs):
    numtjobs = 'UNK'
    if '%snumjobs' % ATTRIB_PREFIX in qjobs[qjobs[job]['children'][0]]:
        numtjobs = qjobs[qjobs[job]['children'][0]]['%snumjobs' % ATTRIB_PREFIX]
    else:
        print "Could not find %snumjobs in qjobs for job %s" % (ATTRIB_PREFIX, job)

    chstat = {'PEND': 0, 'UNSUB': 0, 'RUN': 0, 'ERR': 0}
    for childjob in qjobs[job]['children']:
        chstat[pfwcondor.get_job_status_str(childjob, qjobs)] += 1
    status = "(%s/%s/%s/%s)" % (chstat['ERR'], 
                                chstat['PEND'] + chstat['UNSUB'], 
                                chstat['RUN'], 
                                numtjobs)
    return(status)
    


def print_single(topjobid, jobtype, qjobs):
    """ Print info for single job """

    if '%soperator' % ATTRIB_PREFIX not in qjobs[topjobid]:
        if 'owner' in qjobs[topjobid]:
            qjobs[topjobid]['%soperator' % ATTRIB_PREFIX] = qjobs[topjobid]['owner'].replace('"', '')
        else:
            qjobs[topjobid]['%soperator' % ATTRIB_PREFIX] = "UNK"

    # find innermost dag job
    jobid = topjobid
    while len(qjobs[jobid]['children']) == 1 and \
          ('%sblock' % ATTRIB_PREFIX not in qjobs[jobid] or \
           'pipe' not in qjobs[jobid]['%sblock' % ATTRIB_PREFIX]):
        jobid = qjobs[jobid]['children'][0]


    # grab DESDM from job attributes 
    info = {}
    for key in ['project', 'pipeline', 'run', 'runsite', 'block', 'subblock', 'operator']:
        info[key] = ""
        if ATTRIB_PREFIX + key in qjobs[jobid]:
            info[key] = qjobs[jobid][ATTRIB_PREFIX + key]

    info['status'] = pfwcondor.get_job_status_str(jobid, qjobs)

    # If pipeline mngr, count number of pending, running, etc target jobs
    if len(qjobs[jobid]['children']) > 0:
        info['status'] = status_target_jobs(jobid, qjobs)
        info['subblock'] = "pipelines"
        info['block'] = qjobs[qjobs[jobid]['children'][0]]['%sblock' % ATTRIB_PREFIX]

    print "%7s %1s %3s %-8s %-27s %-30s %-15s %-17s %-8s %-15s" % ( 
          topjobid, jobtype, info['project'][:3], info['pipeline'][:8],
          info['run'][:27], info['block'][:25], info['subblock'][:15], 
          info['status'][:17], info['operator'][:8], info['runsite'][:15]
    )


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
